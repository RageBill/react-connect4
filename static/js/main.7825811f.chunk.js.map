{"version":3,"sources":["asset/sound/tick.wav","asset/sound/win.wav","module/game/main/type.ts","type/type.ts","store/middleware/logger.ts","module/game/main/util/WinChecker.ts","store/reducers/game.ts","store/reducers/index.ts","component/library/Slot/index.tsx","module/game/main/component/Column/index.tsx","module/game/main/component/Piece/index.tsx","module/game/main/component/PromptMessage/index.tsx","module/game/main/component/DragRow/index.tsx","store/actions/game/index.ts","module/game/main/component/WinMessage/index.tsx","module/game/main/component/GameBoard/index.tsx","module/game/main/index.tsx","App.tsx","index.tsx","store/index.ts"],"names":["module","exports","__webpack_require__","p","Action","SlotState","Player","dataLogger","store","next","action","WinChecker","Object","classCallCheck","this","createClass","key","value","data","currentPlayer","currentColIndex","currentRowIndex","verticalSlots","map","slot","i","slice","reduce","total","num","dataByCurrentPosIndex","forEach","column","push","horizontalSlots","leftTop","col","row","rightBot","leftBot","rightTop","fixedTop","fixedBot","line1","line2","length","initialState","available","player1","currentX","dragging","winner","showPrompt","playTickSound","rootReducer","combineReducers","game","state","arguments","undefined","payload","type","GameAction","ON_DRAG_START","objectSpread","ON_DRAG","x","ON_DRAG_STOP","newData","toConsumableArray","columnIndex","Math","round","rowIndex","lastIndexOf","won","checkWinner","player2","Slot","_this$props","props","takenBy","highlight","slotColor","react_default","a","createElement","className","concat","React","PureComponent","Column","columnData","slots","component_library_Slot","connect","Piece","soundRef","createRef","prevProps","prevState","snapshot","current","play","pieceColor","autoPlay","ref","src","require","PromptMessage","createHandlers","dispatch","onStart","onDrag","e","actions","onStop","DragRow","main_component_PromptMessage","react_draggable_default","assign","grid","bounds","disabled","main_component_Piece","WinMessage","messageColor","GameBoard","columns","main_component_Column","main_component_DragRow","main_component_WinMessage","MainComponent","main_component_GameBoard","App","main","middleware","applyMiddleware","createStore","configureStore","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.7825811f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tick.7182f328.wav\";","module.exports = __webpack_public_path__ + \"static/media/win.0ed7f907.wav\";","import {Player, SlotState} from \"../../../type/type\";\n\nexport interface State {\n    data: SlotState[][];\n    currentPlayer: Player;\n    currentX: number;\n    dragging: boolean;\n    winner: Player | null;\n    showPrompt: boolean;\n    playTickSound: boolean;\n}\n\nexport enum Action {\n    ON_DRAG_START,\n    ON_DRAG,\n    ON_DRAG_STOP,\n}\n","export enum SlotState {\n    player1,\n    player2,\n    available,\n}\n\nexport enum Player {\n    player1,\n    player2,\n}\n","/* tslint:disable */\nimport {Middleware} from \"redux\";\n\nexport const dataLogger: Middleware = store => next => action => {\n    if (process.env.NODE_ENV !== \"production\") {\n        console.log(action);\n    }\n    return next(action);\n};\n","import {Player, SlotState} from \"../../../../type/type\";\n\nexport class WinChecker {\n    static checkWinner(data: SlotState[][], currentPlayer: Player, currentColIndex: number, currentRowIndex: number): boolean {\n        // Check for vertical\n        const verticalSlots: number[] = data[currentColIndex].map(slot => ((slot as number) === (currentPlayer as number) ? 1 : 0));\n        for (let i = 0; i < 3; i++) {\n            if (verticalSlots.slice(i, i + 4).reduce((total, num) => total + num) === 4) {\n                return true;\n            }\n        }\n\n        // Check for horizontal\n        const dataByCurrentPosIndex: SlotState[] = [];\n        data.forEach(column => dataByCurrentPosIndex.push(column[currentRowIndex]));\n        const horizontalSlots: number[] = dataByCurrentPosIndex.map(slot => ((slot as number) === (currentPlayer as number) ? 1 : 0));\n        for (let i = 0; i < 4; i++) {\n            if (horizontalSlots.slice(i, i + 4).reduce((total, num) => total + num) === 4) {\n                return true;\n            }\n        }\n\n        // Check for slanting\n\n        // Check for entries in the two slanting lines\n        const leftTop = {col: currentColIndex, row: currentRowIndex};\n        const rightBot = {col: currentColIndex, row: currentRowIndex};\n        const leftBot = {col: currentColIndex, row: currentRowIndex};\n        const rightTop = {col: currentColIndex, row: currentRowIndex};\n\n        let fixedTop = false;\n        let fixedBot = false;\n        let i = currentColIndex;\n        while (i > 0) {\n            i -= 1;\n\n            if (leftTop.row - 1 >= 0 && !fixedTop) {\n                leftTop.col = i;\n                leftTop.row -= 1;\n            } else {\n                fixedTop = true;\n            }\n\n            if (leftBot.row + 1 <= 5 && !fixedBot) {\n                leftBot.col = i;\n                leftBot.row += 1;\n            } else {\n                fixedBot = true;\n            }\n        }\n\n        fixedTop = false;\n        fixedBot = false;\n        i = currentColIndex;\n        while (i < 6) {\n            i += 1;\n\n            if (rightTop.row - 1 >= 0 && !fixedTop) {\n                rightTop.col = i;\n                rightTop.row -= 1;\n            } else {\n                fixedTop = true;\n            }\n\n            if (rightBot.row + 1 <= 5 && !fixedBot) {\n                rightBot.col = i;\n                rightBot.row += 1;\n            } else {\n                fixedBot = true;\n            }\n        }\n\n        let line1: SlotState[] = [];\n        for (let i = 0; i <= rightBot.col - leftTop.col; i++) {\n            line1.push(data[leftTop.col + i][leftTop.row + i]);\n        }\n        let line2: SlotState[] = [];\n        for (let i = 0; i <= rightTop.col - leftBot.col; i++) {\n            line2.push(data[leftBot.col + i][leftBot.row - i]);\n        }\n        line1 = line1.map(slot => ((slot as number) === (currentPlayer as number) ? 1 : 0));\n        line2 = line2.map(slot => ((slot as number) === (currentPlayer as number) ? 1 : 0));\n\n        // Check for the two slanting lines\n        if (line1.length >= 4) {\n            for (let i = 0; i <= line1.length - 4; i++) {\n                if (line1.slice(i, i + 4).reduce((total, num) => total + num) === 4) {\n                    return true;\n                }\n            }\n        }\n        if (line2.length >= 4) {\n            for (let i = 0; i <= line2.length - 4; i++) {\n                if (line2.slice(i, i + 4).reduce((total, num) => total + num) === 4) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n","import {Action as GameAction, State as GameState} from \"../../module/game/main/type\";\nimport {Action} from \"../actions/game\";\nimport {Player, SlotState} from \"../../type/type\";\nimport {WinChecker} from \"../../module/game/main/util/WinChecker\";\n\nconst initialState: GameState = {\n    data: [\n        [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n        [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n        [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n        [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n        [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n        [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n        [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n    ],\n    currentPlayer: Player.player1,\n    currentX: 0,\n    dragging: false,\n    winner: null,\n    showPrompt: true,\n    playTickSound: false,\n};\n\nexport function gameReducer(state: GameState = initialState, action: Action): GameState {\n    const {payload} = action;\n    switch (action.type) {\n        case GameAction.ON_DRAG_START:\n            return {...state, dragging: true, showPrompt: false, playTickSound: false};\n        case GameAction.ON_DRAG:\n            return {...state, currentX: payload.data.x, playTickSound: false};\n        case GameAction.ON_DRAG_STOP:\n            const x = action.payload.data.x;\n            const {currentPlayer} = state;\n            const newData = [...state.data];\n            const columnIndex = Math.round(x / 100);\n            const rowIndex = newData[columnIndex].lastIndexOf(SlotState.available);\n            if (rowIndex === -1) {\n                return {dragging: false, ...state, playTickSound: false};\n            } else {\n                newData[columnIndex][rowIndex] = currentPlayer as number;\n                const won = WinChecker.checkWinner(newData, currentPlayer, columnIndex, rowIndex);\n                return {...state, data: newData, dragging: false, currentPlayer: currentPlayer === Player.player1 ? Player.player2 : Player.player1, winner: won ? currentPlayer : null, playTickSound: !won};\n            }\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from \"redux\";\nimport {RootState} from \"../../type/state\";\nimport {gameReducer} from \"./game\";\n\nexport const rootReducer = combineReducers<RootState>({\n    game: gameReducer as any,\n});\n","import React from \"react\";\nimport \"./index.css\";\nimport {SlotState} from \"../../../type/type\";\n\nconst color1 = \"red\";\nconst color2 = \"yellow\";\n\ninterface Props {\n    takenBy: SlotState;\n    highlight: boolean;\n}\n\nclass Slot extends React.PureComponent<Props> {\n    render() {\n        const {takenBy, highlight} = this.props;\n        const slotColor = takenBy === SlotState.available ? \"\" : takenBy === SlotState.player1 ? color1 : color2;\n        return <div className={`slot ${slotColor} ${highlight ? \"highlight\" : \"\"}`} />;\n    }\n}\n\nexport default Slot;\n","import React from \"react\";\nimport \"./index.css\";\nimport Slot from \"../../../../../component/library/Slot\";\nimport {SlotState} from \"../../../../../type/type\";\nimport {RootState} from \"../../../../../type/state\";\nimport {connect} from \"react-redux\";\n\ninterface StateProps {\n    data: SlotState[][];\n    dragging: boolean;\n    currentX: number;\n}\n\ninterface Props extends StateProps {\n    column: number;\n}\n\nclass Column extends React.PureComponent<Props> {\n    render() {\n        const {column, data, dragging, currentX} = this.props;\n        const columnData = data[column];\n        const highlight = dragging && Math.round(currentX / 100) === column ? columnData.lastIndexOf(SlotState.available) : null;\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < 6; i++) {\n            slots.push(<Slot takenBy={columnData[i]} key={`slot-${column}-${i}`} highlight={highlight === i} />);\n        }\n        return <div className=\"column\">{slots}</div>;\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    data: state.game.data,\n    dragging: state.game.dragging,\n    currentX: state.game.currentX,\n});\n\nexport default connect(mapStateToProps)(Column);\n","import React, {createRef} from \"react\";\nimport \"./index.css\";\nimport {Player} from \"../../../../../type/type\";\nimport {RootState} from \"../../../../../type/state\";\nimport {connect} from \"react-redux\";\n\nconst color1 = \"red\";\nconst color2 = \"yellow\";\n\ninterface StateProps {\n    currentPlayer: Player;\n    playTickSound: boolean;\n}\n\ninterface Props extends StateProps {}\n\nclass Piece extends React.PureComponent<Props> {\n    private soundRef = createRef<HTMLAudioElement>();\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n        if (this.props.playTickSound && prevProps.currentPlayer !== this.props.currentPlayer) {\n            const sound = this.soundRef.current!;\n            sound.play();\n        }\n    }\n\n    render() {\n        const {currentPlayer} = this.props;\n        const pieceColor = currentPlayer === Player.player1 ? color1 : color2;\n        return (\n            <div className={`${pieceColor} piece`}>\n                <audio autoPlay ref={this.soundRef} src={require(\"../../../../../asset/sound/tick.wav\")} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    currentPlayer: state.game.currentPlayer,\n    playTickSound: state.game.playTickSound,\n});\n\nexport default connect(mapStateToProps)(Piece);\n","import React from \"react\";\nimport \"./index.css\";\n\nclass PromptMessage extends React.PureComponent<{}> {\n    render() {\n        return (\n            <div className=\"prompt\">\n                <div className=\"cursor\" />\n                <div className=\"prompt-message\">\n                    <p>Drag to play</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PromptMessage;\n","import React from \"react\";\nimport Draggable, {DraggableData, DraggableEvent} from \"react-draggable\";\nimport \"./index.css\";\nimport Piece from \"../Piece\";\nimport {connect} from \"react-redux\";\nimport * as actions from \"../../../../../store/actions/game\";\nimport {Dispatch} from \"redux\";\nimport {Player} from \"../../../../../type/type\";\nimport {RootState} from \"../../../../../type/state\";\nimport PromptMessage from \"../PromptMessage\";\n\ninterface StateProps {\n    winner: Player | null;\n    showPrompt: boolean;\n}\n\ninterface Props extends StateProps {\n    dispatch: Dispatch;\n}\n\nconst createHandlers = (dispatch: Dispatch) => {\n    const onStart = () => {\n        dispatch(actions.onStart());\n    };\n\n    const onDrag = (e: DraggableEvent, data: DraggableData) => {\n        dispatch(actions.onDrag(e, data));\n    };\n\n    const onStop = (e: DraggableEvent, data: DraggableData) => {\n        dispatch(actions.onStop(e, data));\n    };\n    return {onStart, onDrag, onStop};\n};\n\nclass DragRow extends React.PureComponent<Props> {\n    render() {\n        const {winner, showPrompt} = this.props;\n        return (\n            <div className=\"dragrow\">\n                {showPrompt && <PromptMessage />}\n                <Draggable {...createHandlers(this.props.dispatch)} grid={[100, 100]} bounds=\"parent\" disabled={winner !== null}>\n                    <div className=\"draggableDiv\">\n                        <Piece />\n                    </div>\n                </Draggable>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    winner: state.game.winner,\n    showPrompt: state.game.showPrompt,\n});\n\nexport default connect(mapStateToProps)(DragRow);\n","import {Action as GameAction} from \"../../../module/game/main/type\";\nimport {DraggableData, DraggableEvent} from \"react-draggable\";\n\nexport interface Action {\n    type: GameAction;\n    payload?: any;\n}\n\nexport const onStart = () => ({\n    type: GameAction.ON_DRAG_START,\n});\n\nexport const onDrag = (e: DraggableEvent, data: DraggableData) => ({\n    type: GameAction.ON_DRAG,\n    payload: {\n        data,\n    },\n});\n\nexport const onStop = (e: DraggableEvent, data: DraggableData) => ({\n    type: GameAction.ON_DRAG_STOP,\n    payload: {\n        data,\n    },\n});\n","import React from \"react\";\nimport \"./index.css\";\nimport {Player} from \"../../../../../type/type\";\nimport {RootState} from \"../../../../../type/state\";\nimport {connect} from \"react-redux\";\n\nconst color1 = \"red\";\nconst color2 = \"yellow\";\n\ninterface StateProps {\n    winner: Player | null;\n}\n\ninterface Props extends StateProps {}\n\nclass WinMessage extends React.PureComponent<Props> {\n    render() {\n        const {winner} = this.props;\n        const messageColor = winner === null ? null : winner === Player.player1 ? color1 : color2;\n        return winner === null ? null : (\n            <h1 className={`${messageColor}-font message`}>\n                {`Player ${winner + 1} wins!`}\n                <audio autoPlay src={require(\"../../../../../asset/sound/win.wav\")} />\n            </h1>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    winner: state.game.winner,\n});\n\nexport default connect(mapStateToProps)(WinMessage);\n","import React from \"react\";\nimport \"./index.css\";\nimport Column from \"../Column\";\nimport DragRow from \"../DragRow\";\nimport WinMessage from \"../WinMessage\";\nimport {RootState} from \"../../../../../type/state\";\nimport {connect} from \"react-redux\";\n\ninterface StateProps {\n    playTickSound: boolean;\n}\n\ninterface Props extends StateProps {}\n\nclass GameBoard extends React.PureComponent<Props> {\n    render() {\n        const {playTickSound} = this.props;\n        const columns: JSX.Element[] = [];\n        for (let i = 0; i < 7; i++) {\n            columns.push(<Column column={i} key={`column-${i}`} />);\n        }\n        return (\n            <div className=\"container\">\n                <DragRow />\n                {columns}\n                <WinMessage />\n                {playTickSound && <audio autoPlay src={require(\"../../../../../asset/sound/tick.wav\")} />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    playTickSound: state.game.playTickSound,\n});\n\nexport default connect(mapStateToProps)(GameBoard);\n","import React from \"react\";\nimport GameBoard from \"./component/GameBoard\";\n\nclass MainComponent extends React.PureComponent {\n    render() {\n        return <GameBoard />;\n    }\n}\n\nexport default MainComponent;\n","import React from \"react\";\nimport \"./App.css\";\nimport MainComponent from \"./module/game/main\";\n\nclass App extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"App\">\n                <MainComponent />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport {configureStore} from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n","import {Store, createStore, applyMiddleware} from \"redux\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {dataLogger} from \"./middleware/logger\";\nimport {RootState} from \"../type/state\";\nimport {rootReducer} from \"./reducers\";\n\nexport function configureStore(initialState?: RootState): Store<RootState> {\n    let middleware = applyMiddleware(dataLogger);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        middleware = composeWithDevTools(middleware);\n    }\n\n    const store = createStore(rootReducer, initialState, middleware) as Store<RootState>;\n\n    return store;\n}\n"],"sourceRoot":""}