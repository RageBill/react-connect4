{"version":3,"sources":["asset/sound/tick.wav","asset/sound/win.wav","module/game/main/type.ts","type/type.ts","store/middleware/logger.ts","module/game/main/util/WinChecker.ts","store/reducers/game.ts","store/reducers/index.ts","component/library/Slot/index.tsx","module/game/main/component/Column/index.tsx","module/game/main/component/Piece/index.tsx","store/actions/game/index.ts","module/game/main/component/PromptMessage/index.tsx","module/game/main/component/DragRow/index.tsx","module/game/main/component/WinMessage/index.tsx","component/library/Arrow/index.tsx","module/game/main/component/GameBoard/index.tsx","module/game/main/index.tsx","App.tsx","index.tsx","store/index.ts"],"names":["module","exports","__webpack_require__","p","Action","SlotState","Player","dataLogger","store","next","action","WinChecker","Object","classCallCheck","this","createClass","key","value","data","currentPlayer","currentColIndex","currentRowIndex","verticalSlots","map","slot","i","slice","reduce","total","num","dataByCurrentPosIndex","forEach","column","push","horizontalSlots","leftTop","col","row","rightBot","leftBot","rightTop","fixedTop","fixedBot","line1","line2","length","initialState","history","available","step","player1","currentX","dragging","winner","showPrompt","playTickSound","rootReducer","combineReducers","game","state","arguments","undefined","payload","type","GameAction","ON_DRAG_START","objectSpread","ON_DRAG","x","ON_DRAG_STOP","newData","toConsumableArray","columnIndex","Math","round","rowIndex","lastIndexOf","newHistory","index","won","checkWinner","player2","STEP_BACKWARD","STEP_FORWARD","Slot","props","_this","possibleConstructorReturn","getPrototypeOf","call","takenBy","highlight","_this$state","react_default","a","createElement","className","concat","React","Component","getDerivedStateFromProps","nextProps","columnData","connect","Column","slots","component_library_Slot","PureComponent","Piece","soundRef","createRef","prevProps","prevState","snapshot","current","play","pieceColor","autoPlay","ref","src","require","onStepBackwardClick","onStepForwardClick","PromptMessage","createHandlers","dispatch","onStart","onDrag","e","actions","onStop","DragRow","_this$props","main_component_PromptMessage","react_draggable_default","assign","grid","bounds","disabled","main_component_Piece","WinMessage","messageColor","Arrow","arrowDirection","direction","onClick","handleClick","defaultProps","GameBoard","columns","main_component_Column","main_component_DragRow","component_library_Arrow","main_component_WinMessage","bindActionCreators","MainComponent","main_component_GameBoard","App","main","middleware","applyMiddleware","createStore","configureStore","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c21895a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tick.7182f328.wav\";","module.exports = __webpack_public_path__ + \"static/media/win.0ed7f907.wav\";","import {Player, SlotState} from \"../../../type/type\";\n\nexport interface State {\n    history: SlotState[][][];\n    step: number;\n    currentPlayer: Player;\n    currentX: number;\n    dragging: boolean;\n    winner: Player | null;\n    showPrompt: boolean;\n    playTickSound: boolean;\n}\n\nexport enum Action {\n    ON_DRAG_START,\n    ON_DRAG,\n    ON_DRAG_STOP,\n    STEP_BACKWARD,\n    STEP_FORWARD,\n}\n","export enum SlotState {\n    player1,\n    player2,\n    available,\n}\n\nexport enum Player {\n    player1,\n    player2,\n}\n","/* tslint:disable */\nimport {Middleware} from \"redux\";\n\nexport const dataLogger: Middleware = store => next => action => {\n    if (process.env.NODE_ENV !== \"production\") {\n        console.log(action);\n    }\n    return next(action);\n};\n","import {Player, SlotState} from \"../../../../type/type\";\n\nexport class WinChecker {\n    static checkWinner(data: SlotState[][], currentPlayer: Player, currentColIndex: number, currentRowIndex: number): boolean {\n        // Check for vertical\n        const verticalSlots: number[] = data[currentColIndex].map(slot => ((slot as number) === (currentPlayer as number) ? 1 : 0));\n        for (let i = 0; i < 3; i++) {\n            if (verticalSlots.slice(i, i + 4).reduce((total, num) => total + num) === 4) {\n                return true;\n            }\n        }\n\n        // Check for horizontal\n        const dataByCurrentPosIndex: SlotState[] = [];\n        data.forEach(column => dataByCurrentPosIndex.push(column[currentRowIndex]));\n        const horizontalSlots: number[] = dataByCurrentPosIndex.map(slot => ((slot as number) === (currentPlayer as number) ? 1 : 0));\n        for (let i = 0; i < 4; i++) {\n            if (horizontalSlots.slice(i, i + 4).reduce((total, num) => total + num) === 4) {\n                return true;\n            }\n        }\n\n        // Check for slanting\n\n        // Check for entries in the two slanting lines\n        const leftTop = {col: currentColIndex, row: currentRowIndex};\n        const rightBot = {col: currentColIndex, row: currentRowIndex};\n        const leftBot = {col: currentColIndex, row: currentRowIndex};\n        const rightTop = {col: currentColIndex, row: currentRowIndex};\n\n        let fixedTop = false;\n        let fixedBot = false;\n        let i = currentColIndex;\n        while (i > 0) {\n            i -= 1;\n\n            if (leftTop.row - 1 >= 0 && !fixedTop) {\n                leftTop.col = i;\n                leftTop.row -= 1;\n            } else {\n                fixedTop = true;\n            }\n\n            if (leftBot.row + 1 <= 5 && !fixedBot) {\n                leftBot.col = i;\n                leftBot.row += 1;\n            } else {\n                fixedBot = true;\n            }\n        }\n\n        fixedTop = false;\n        fixedBot = false;\n        i = currentColIndex;\n        while (i < 6) {\n            i += 1;\n\n            if (rightTop.row - 1 >= 0 && !fixedTop) {\n                rightTop.col = i;\n                rightTop.row -= 1;\n            } else {\n                fixedTop = true;\n            }\n\n            if (rightBot.row + 1 <= 5 && !fixedBot) {\n                rightBot.col = i;\n                rightBot.row += 1;\n            } else {\n                fixedBot = true;\n            }\n        }\n\n        let line1: SlotState[] = [];\n        for (let i = 0; i <= rightBot.col - leftTop.col; i++) {\n            line1.push(data[leftTop.col + i][leftTop.row + i]);\n        }\n        let line2: SlotState[] = [];\n        for (let i = 0; i <= rightTop.col - leftBot.col; i++) {\n            line2.push(data[leftBot.col + i][leftBot.row - i]);\n        }\n        line1 = line1.map(slot => ((slot as number) === (currentPlayer as number) ? 1 : 0));\n        line2 = line2.map(slot => ((slot as number) === (currentPlayer as number) ? 1 : 0));\n\n        // Check for the two slanting lines\n        if (line1.length >= 4) {\n            for (let i = 0; i <= line1.length - 4; i++) {\n                if (line1.slice(i, i + 4).reduce((total, num) => total + num) === 4) {\n                    return true;\n                }\n            }\n        }\n        if (line2.length >= 4) {\n            for (let i = 0; i <= line2.length - 4; i++) {\n                if (line2.slice(i, i + 4).reduce((total, num) => total + num) === 4) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n","import {Action as GameAction, State as GameState} from \"../../module/game/main/type\";\nimport {Action} from \"../actions/game\";\nimport {Player, SlotState} from \"../../type/type\";\nimport {WinChecker} from \"../../module/game/main/util/WinChecker\";\n\nconst emptyBoard: SlotState[][] = [\n    [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n    [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n    [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n    [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n    [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n    [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n    [SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available, SlotState.available],\n];\n\nconst initialState: GameState = {\n    history: [emptyBoard],\n    step: 0,\n    currentPlayer: Player.player1,\n    currentX: 0,\n    dragging: false,\n    winner: null,\n    showPrompt: true,\n    playTickSound: false,\n};\n\nexport function gameReducer(state: GameState = initialState, action: Action): GameState {\n    const {payload} = action;\n    const {currentPlayer, history, step} = state;\n    switch (action.type) {\n        case GameAction.ON_DRAG_START:\n            return {...state, dragging: true, showPrompt: false, playTickSound: false};\n        case GameAction.ON_DRAG:\n            return {...state, currentX: payload.data.x, playTickSound: false};\n        case GameAction.ON_DRAG_STOP:\n            const x = payload.data.x;\n            const data = history[step];\n            const newData = [...data];\n            const columnIndex = Math.round(x / 100);\n            const rowIndex = newData[columnIndex].lastIndexOf(SlotState.available);\n            if (rowIndex === -1) {\n                return {...state, dragging: false, playTickSound: false};\n            } else {\n                newData[columnIndex][rowIndex] = currentPlayer as number;\n                const newHistory: SlotState[][][] = [];\n                history.forEach((data, index) => {\n                    if (index <= step) {\n                        newHistory.push(data);\n                    } else {\n                        return;\n                    }\n                });\n                newHistory.push(newData);\n                const won = WinChecker.checkWinner(newData, currentPlayer, columnIndex, rowIndex);\n                return {...state, history: newHistory, step: step + 1, dragging: false, currentPlayer: currentPlayer === Player.player1 ? Player.player2 : Player.player1, winner: won ? currentPlayer : null, playTickSound: !won};\n            }\n        case GameAction.STEP_BACKWARD:\n            if (step > 0) {\n                return {...state, step: step - 1, currentPlayer: currentPlayer === Player.player1 ? Player.player2 : Player.player1};\n            } else {\n                return state;\n            }\n        case GameAction.STEP_FORWARD:\n            if (step + 1 < history.length) {\n                return {...state, step: step + 1, currentPlayer: currentPlayer === Player.player1 ? Player.player2 : Player.player1};\n            }\n            return state;\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from \"redux\";\nimport {RootState} from \"../../type/state\";\nimport {gameReducer} from \"./game\";\n\nexport const rootReducer = combineReducers<RootState>({\n    game: gameReducer as any,\n});\n","import React from \"react\";\nimport \"./index.css\";\nimport {SlotState} from \"../../../type/type\";\nimport {connect} from \"react-redux\";\nimport {RootState} from \"../../../type/state\";\n\nconst color1 = \"red\";\nconst color2 = \"yellow\";\n\ninterface StateProps {\n    history: SlotState[][][];\n    step: number;\n    dragging: boolean;\n    currentX: number;\n}\n\ninterface Props extends StateProps {\n    column: number;\n    row: number;\n}\n\ninterface State {\n    takenBy: SlotState;\n    highlight: boolean;\n}\n\nclass Slot extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            takenBy: SlotState.available,\n            highlight: false,\n        };\n    }\n\n    static getDerivedStateFromProps = (nextProps: Props) => {\n        const {column, row, history, step, dragging, currentX} = nextProps;\n        const data = history[step];\n        const columnData = data[column];\n        const highlight = dragging && Math.round(currentX / 100) === column && columnData.lastIndexOf(SlotState.available) === row;\n        return {takenBy: columnData[row], highlight: highlight};\n    };\n\n    render() {\n        const {takenBy, highlight} = this.state;\n        return <div className={`slot ${takenBy !== SlotState.available && (takenBy === SlotState.player1 ? color1 : color2)} ${highlight && \"highlight\"}`} />;\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    history: state.game.history,\n    step: state.game.step,\n    dragging: state.game.dragging,\n    currentX: state.game.currentX,\n});\n\nexport default connect(mapStateToProps)(Slot);\n","import React from \"react\";\nimport \"./index.css\";\nimport Slot from \"../../../../../component/library/Slot\";\n\ninterface Props {\n    column: number;\n}\n\nclass Column extends React.PureComponent<Props> {\n    render() {\n        const {column} = this.props;\n        const slots: JSX.Element[] = [];\n        for (let i = 0; i < 6; i++) {\n            slots.push(<Slot column={column} row={i} key={`slot-${i}`} />);\n        }\n        return <div className=\"column\">{slots}</div>;\n    }\n}\n\nexport default Column;\n","import React, {createRef} from \"react\";\nimport \"./index.css\";\nimport {Player} from \"../../../../../type/type\";\nimport {RootState} from \"../../../../../type/state\";\nimport {connect} from \"react-redux\";\n\nconst color1 = \"red\";\nconst color2 = \"yellow\";\n\ninterface StateProps {\n    currentPlayer: Player;\n    playTickSound: boolean;\n}\n\ninterface Props extends StateProps {}\n\nclass Piece extends React.PureComponent<Props> {\n    private soundRef = createRef<HTMLAudioElement>();\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n        if (this.props.playTickSound && prevProps.currentPlayer !== this.props.currentPlayer) {\n            const sound = this.soundRef.current!;\n            sound.play();\n        }\n    }\n\n    render() {\n        const {currentPlayer} = this.props;\n        const pieceColor = currentPlayer === Player.player1 ? color1 : color2;\n        return (\n            <div className={`${pieceColor} piece`}>\n                <audio autoPlay ref={this.soundRef} src={require(\"../../../../../asset/sound/tick.wav\")} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    currentPlayer: state.game.currentPlayer,\n    playTickSound: state.game.playTickSound,\n});\n\nexport default connect(mapStateToProps)(Piece);\n","import {Action as GameAction} from \"../../../module/game/main/type\";\nimport {DraggableData, DraggableEvent} from \"react-draggable\";\n\nexport interface Action {\n    type: GameAction;\n    payload?: any;\n}\n\nexport const onStart = () => ({\n    type: GameAction.ON_DRAG_START,\n});\n\nexport const onDrag = (e: DraggableEvent, data: DraggableData) => ({\n    type: GameAction.ON_DRAG,\n    payload: {\n        data,\n    },\n});\n\nexport const onStop = (e: DraggableEvent, data: DraggableData) => ({\n    type: GameAction.ON_DRAG_STOP,\n    payload: {\n        data,\n    },\n});\n\nexport const onStepBackwardClick = () => ({\n    type: GameAction.STEP_BACKWARD,\n});\n\nexport const onStepForwardClick = () => ({\n    type: GameAction.STEP_FORWARD,\n});\n","import React from \"react\";\nimport \"./index.css\";\n\nclass PromptMessage extends React.PureComponent<{}> {\n    render() {\n        return (\n            <div className=\"prompt\">\n                <div className=\"cursor\" />\n                <div className=\"prompt-message\">\n                    <p>Drag to play</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PromptMessage;\n","import React from \"react\";\nimport Draggable, {DraggableData, DraggableEvent} from \"react-draggable\";\nimport \"./index.css\";\nimport Piece from \"../Piece\";\nimport {connect} from \"react-redux\";\nimport * as actions from \"../../../../../store/actions/game\";\nimport {Dispatch} from \"redux\";\nimport {Player} from \"../../../../../type/type\";\nimport {RootState} from \"../../../../../type/state\";\nimport PromptMessage from \"../PromptMessage\";\n\ninterface StateProps {\n    winner: Player | null;\n    showPrompt: boolean;\n}\n\ninterface Props extends StateProps {\n    dispatch: Dispatch;\n}\n\nconst createHandlers = (dispatch: Dispatch) => {\n    const onStart = () => {\n        dispatch(actions.onStart());\n    };\n\n    const onDrag = (e: DraggableEvent, data: DraggableData) => {\n        dispatch(actions.onDrag(e, data));\n    };\n\n    const onStop = (e: DraggableEvent, data: DraggableData) => {\n        dispatch(actions.onStop(e, data));\n    };\n    return {onStart, onDrag, onStop};\n};\n\nclass DragRow extends React.PureComponent<Props> {\n    render() {\n        const {winner, showPrompt} = this.props;\n        return (\n            <div className=\"dragrow\">\n                {showPrompt && <PromptMessage />}\n                <Draggable {...createHandlers(this.props.dispatch)} grid={[100, 100]} bounds=\"parent\" disabled={winner !== null}>\n                    <div className=\"draggableDiv\">\n                        <Piece />\n                    </div>\n                </Draggable>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    winner: state.game.winner,\n    showPrompt: state.game.showPrompt,\n});\n\nexport default connect(mapStateToProps)(DragRow);\n","import React from \"react\";\nimport \"./index.css\";\nimport {Player} from \"../../../../../type/type\";\nimport {RootState} from \"../../../../../type/state\";\nimport {connect} from \"react-redux\";\n\nconst color1 = \"red\";\nconst color2 = \"yellow\";\n\ninterface StateProps {\n    winner: Player | null;\n}\n\ninterface Props extends StateProps {}\n\nclass WinMessage extends React.PureComponent<Props> {\n    render() {\n        const {winner} = this.props;\n        const messageColor = winner === null ? null : winner === Player.player1 ? color1 : color2;\n        return winner === null ? null : (\n            <h1 className={`${messageColor}-font message`}>\n                {`Player ${winner + 1} wins!`}\n                <audio autoPlay src={require(\"../../../../../asset/sound/win.wav\")} />\n            </h1>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    winner: state.game.winner,\n});\n\nexport default connect(mapStateToProps)(WinMessage);\n","import React from \"react\";\nimport \"./index.css\";\n\ninterface Props {\n    direction: \"left\" | \"right\";\n    handleClick?: () => void;\n}\n\nconst Arrow: React.FunctionComponent<Props> = (props: Props) => {\n    const arrowDirection = `arrow-${props.direction}`;\n    return <div className={arrowDirection} onClick={props.handleClick} />;\n};\n\nArrow.defaultProps = {\n    handleClick: () => {},\n};\n\nexport default Arrow;\n","import React from \"react\";\nimport \"./index.css\";\nimport Column from \"../Column\";\nimport DragRow from \"../DragRow\";\nimport WinMessage from \"../WinMessage\";\nimport {RootState} from \"../../../../../type/state\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators, Dispatch} from \"redux\";\nimport Arrow from \"../../../../../component/library/Arrow\";\nimport {onStepBackwardClick, onStepForwardClick} from \"../../../../../store/actions/game\";\n\ninterface StateProps {\n    playTickSound: boolean;\n}\n\ninterface DispatchProps {\n    onStepBackwardClick: () => void;\n    onStepForwardClick: () => void;\n}\n\ninterface Props extends StateProps, DispatchProps {}\n\nclass GameBoard extends React.PureComponent<Props> {\n    render() {\n        const {playTickSound, onStepBackwardClick, onStepForwardClick} = this.props;\n        const columns: JSX.Element[] = [];\n        for (let i = 0; i < 7; i++) {\n            columns.push(<Column column={i} key={`column-${i}`} />);\n        }\n        return (\n            <div className=\"container\">\n                <DragRow />\n                <div>{columns}</div>\n                <div className=\"arrow-container\">\n                    <Arrow direction={\"left\"} handleClick={onStepBackwardClick} />\n                    <Arrow direction={\"right\"} handleClick={onStepForwardClick} />\n                </div>\n                <WinMessage />\n                {playTickSound && <audio autoPlay src={require(\"../../../../../asset/sound/tick.wav\")} />}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    playTickSound: state.game.playTickSound,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({onStepBackwardClick, onStepForwardClick}, dispatch);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(GameBoard);\n","import React from \"react\";\nimport GameBoard from \"./component/GameBoard\";\n\nclass MainComponent extends React.PureComponent {\n    render() {\n        return <GameBoard />;\n    }\n}\n\nexport default MainComponent;\n","import React from \"react\";\nimport \"./App.css\";\nimport MainComponent from \"./module/game/main\";\n\nclass App extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"App\">\n                <MainComponent />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport {configureStore} from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n","import {Store, createStore, applyMiddleware} from \"redux\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {dataLogger} from \"./middleware/logger\";\nimport {RootState} from \"../type/state\";\nimport {rootReducer} from \"./reducers\";\n\nexport function configureStore(initialState?: RootState): Store<RootState> {\n    let middleware = applyMiddleware(dataLogger);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        middleware = composeWithDevTools(middleware);\n    }\n\n    const store = createStore(rootReducer, initialState, middleware) as Store<RootState>;\n\n    return store;\n}\n"],"sourceRoot":""}